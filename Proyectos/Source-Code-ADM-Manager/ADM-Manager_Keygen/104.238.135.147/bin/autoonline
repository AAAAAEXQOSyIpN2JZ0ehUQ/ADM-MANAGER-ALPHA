#!/bin/bash

(
base_bak="/etc/adm-server/adm-bak"
base_adm="/etc/adm-server/adm-ultimate"
[[ $(ls ${base_adm}|wc -l) -lt "30" ]] && {
if [[ -d ${base_bak} ]]; then
cp ${base_bak}/* ${base_adm}
fi
}
) &

meu_ip () {
MIP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MIP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MIP" != "$MIP2" ]] && IP="$MIP2" || IP="$MIP"
}

function_verify () {
  permited=$(curl -sSL "104.238.135.147:81/serverlibs") || {
  echo "SEM COMUNICAÇÃO COM SERVIDOR MAE"
  exit
  }
  meu_ip
  [[ $(echo $permited|grep "$IP") = "" ]] && {
  [[ -e /bin/tries-adm ]] && tries=$(cat /bin/tries-adm)
  [[ $tries = "" ]] && tries=0
  [[ $tries -gt "3" ]] && {
   rm -rf $base_adm
   rm /bin/tries-adm
   rm /bin/autoonline
   rm -rf $base_bak
   echo '==================================='
   echo 'DATA-BASE REMOVIDA!'
   echo '==================================='
   exit
   }
  let tries++
  echo "$tries" > /bin/tries-adm
  echo '==================================='
  echo 'NO OFICIAL VERSION!, PLEASE REINSTALL'
  echo '==================================='
  echo 'Contact your Reseler'
  echo " Tentativa $tries"
  echo '==================================='
  exit  
  }
}

dirkey="/etc/adm-server/keys"
[[ ! -e /etc/adm-server/credit ]] && echo "OFICIAL ADM-SERVER" > /etc/adm-server/credit
[[ ! -d $dirkey ]] && mkdir $dirkey

atualiza_fun () {
cd $HOME
wget https://www.dropbox.com/s/y2oxbunh9huwyb3/instala_server -o /dev/null
chmod 777 ./instala_server
./instala_server
}

ofuscate_fun () {
number=$(expr length $1)
for((i=1; i<$(($number+1)); i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
if [ "${txt[$i]}" = "." ]; then
txt[$i]="#"
elif [ "${txt[$i]}" = "#" ]; then
txt[$i]="."
fi
if [ "${txt[$i]}" = "1" ]; then
txt[$i]="@"
elif [ "${txt[$i]}" = "@" ]; then
txt[$i]="1"
fi
if [ "${txt[$i]}" = "2" ]; then
txt[$i]="?"
elif [ "${txt[$i]}" = "?" ]; then
txt[$i]="2"
fi
if [ "${txt[$i]}" = "3" ]; then
txt[$i]="&"
elif [ "${txt[$i]}" = "&" ]; then
txt[$i]="3"
fi
txtofus+="${txt[$i]}"
done
obfus=$(echo $txtofus | rev)
txt_ofuscatw=$(echo $txtofus | rev)
unset varq
}

meu_ip () {
MIP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MIP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MIP" != "$MIP2" ]] && IP="$MIP2" || IP="$MIP"
}

unset theserver
theserver=$(netstat -nltp|grep faucet)
[[ $theserver = "" ]] && theserver="\033[1;31m offline" || theserver="\033[1;32m online"
amarelo="\033[1;33m"
verde="\033[1;32m"
vermelho="\033[1;31m"
branco="\033[1;37m"
function_verify
clear
echo -e "\033[1;36m========================================\033[1;37m"
echo -e "${vermelho}|1| - ${amarelo}criar key"
echo -e "${vermelho}|2| - ${amarelo}status key"
echo -e "${vermelho}|3| - ${amarelo}remover key"
echo -ne "${vermelho}|4| - ${amarelo}iniciar/parar sistema"; echo -e " (${theserver} ${amarelo})"
echo -e "${vermelho}|5| - ${amarelo}Creditos!"
echo -e "${vermelho}|6| - ${amarelo}Atualizar!"
echo -e "\033[1;36m========================================\033[1;37m"
echo -ne "Opcoes: "; read options
meu_ip
ofuscate_fun "${IP}:81"
case $options in
1)
echo -ne "${vermelho}Nome do Dono da Key (nombre/name):${branco} "; read name
echo -ne "${vermelho}Quantidade Keys (number):${branco} "; read num
echo -e "${amarelo}GENERANDO...${verde}"
for((k=0; k<$num; k++)); do
arch="$((100*$RANDOM*$RANDOM+$RANDOM))"
echo "$name" > ${dirkey}/${arch}
echo "${obfus}+${arch}"
done
echo -e "${amarelo}GERADAS..."
;;
2)
numkey="$(ls ${dirkey}|wc -l)"
echo -ne "${amarelo}Numero de Keys Ativas!: "; echo -e "${vermelho}$numkey"
[[ ${numkey} = "0" ]] && exit
for keys in $(ls ${dirkey}); do
unset dono
dono=$(cat ${dirkey}/${keys}|head -1)
key+="$dono|${obfus}+${keys}\n"
done
for i in $(echo -e ${key}|sort); do
usuario=$(echo -e "$i"|cut -d'|' -f1)
keys=$(echo -e "$i"|cut -d'|' -f2)
echo -e "${amarelo}Usuario: ${vermelho}$usuario ${amarelo}Key Ativas:${vermelho} $keys"
done
;;
3)
i=0
echo -ne "${amarelo}"
for arqs in $(ls ${dirkey}); do
rm[$i]="$arqs"
echo -e "[$i] - ${obfus}+${arqs}"
i=$(($i+1))
done
echo -ne "${vermelho}Escolha a key a ser removida: ${branco}"; read remo
if [[ $remo = "" ]]; then
echo ""
elif [[ $remo -gt "$(($i-1))" ]]; then
echo ""
else
[[ ! -e "${dirkey}/${rm[$remo]}" ]] && exit || rm ${dirkey}/${rm[$remo]}
fi
;;
4)
if [[ $(netstat -nltp|grep faucet) = "" ]]; then
keyserver.sh -start "/bin/keyserver.sh"
else
killall faucet
fi
;;
5)
echo -ne "${amarelo}New Credit ADM: ${branco}"; read newcredit
echo "$newcredit" > /etc/adm-server/credit
;;
6)
atualiza_fun
;;
esac
echo -ne "\033[0m"
exit